namespace BusinessApp.App
{
    using System;
    using System.Threading;
    using System.Threading.Tasks;
    using BusinessApp.Domain;

    public class TransactionDecorator<TCommand> : ICommandHandler<TCommand>
    {
        private readonly ICommandHandler<TCommand> inner;
        private readonly ITransactionFactory transactionFactory;
        private readonly PostCommitRegister register;

        public TransactionDecorator(ITransactionFactory transactionFactory,
            ICommandHandler<TCommand> inner,
            PostCommitRegister register)
        {
            this.inner = Guard.Against.Null(inner).Expect(nameof(inner));
            this.transactionFactory = Guard.Against.Null(transactionFactory).Expect(nameof(transactionFactory));
            this.register = Guard.Against.Null(register).Expect(nameof(register));
        }

        public async Task<Result<TCommand, IFormattable>> HandleAsync(
            TCommand command, CancellationToken cancellationToken)
        {
            Guard.Against.Null(command).Expect(nameof(command));

            var trans = transactionFactory.Begin();

            var result = await inner.HandleAsync(command, cancellationToken);

            await trans.CommitAsync(cancellationToken);

            while (register.FinishHandlers.Count > 0)
            {
                try
                {
                    await register.OnFinishedAsync();
                }
                catch
                {
                    await trans.RevertAsync(cancellationToken);
                    throw;
                }

                try
                {
                    await trans.CommitAsync(cancellationToken);
                }
                catch (Exception e)
                {
                    throw new CommunicationException("Some events generated by this business " +
                        "transaction failed to save. As a result, some data may be in a invalid state." +
                        "Please verify your data before continuing", e);
                }
            }

            return result;
        }
    }
}
