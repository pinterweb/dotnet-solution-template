{
    "$schema": "http://json.schemastore.org/template",
    "author": "Jeremy Zagorski",
    "classifications": [ "Solution", "API", "WebApi", "Routing", "Controllerless", "Endpoints" ],
    "identity": "WebApiSolution.CSharp",
    "name": "Solution File with Project Layers",
    "shortName": "sln-layers",
    "tags": {
        "language": "C#",
        "type": "project"
    },
    "sourceName": "BusinessApp",
    "symbols":{
        "description": {
            "type": "parameter",
            "dataType": "string",
            "replaces":"$(product_description)",
            "defaultValue": "",
            "isRequired": "false",
            "description": "A description of your app"
        },
        "copyrightName": {
            "type": "parameter",
            "dataType": "string",
            "isRequired": "false",
            "description": "Your personal or company copyright"
        },
        "copyrightYear": {
            "type": "generated",
            "generator": "now",
            "replaces": "1975-1975",
            "parameters": {
                "format": "yyyy"
            }
        },
        "vsc": {
            "type": "parameter",
            "dataType": "string",
            "defaultValue": "git",
            "description": "Adds vsc related files"
        },
        "efcore": {
            "type": "parameter",
            "dataType": "bool",
            "defaultValue": "true",
            "description": "Adds services for entity framework core in your data layer"
        },
        "json": {
            "type": "parameter",
            "dataType": "choice",
            "defaultValue": "systemjson",
            "description": "Adds services to parse json payloads",
            "choices": [{
                "choice": "systemjson",
                "description": "use System.Text.Json"
            }, {
                "choice": "newtonsoft",
                "description": "use Newtonsoft.Json"
            }]
        },
        "systemjson": {
          "type": "computed",
          "value": "(json == \"systemjson\")"
        },
        "newtonsoft": {
          "type": "computed",
          "value": "(json == \"newtonsoft\")"
        },
        "usehateoas": {
          "type": "computed",
          "value": "(hateoas != \"none\")"
        },
        "docker": {
            "type": "parameter",
            "dataType": "boolean",
            "isRequired": "false",
            "defaultValue": "true",
            "description": "Support for docker and docker-compose support."
        },
        "fluentvalidation": {
            "type": "parameter",
            "dataType": "bool",
            "isRequired": "false",
            "defaultValue": "false",
            "description": "Adds services integrate the fluent validation library"
        },
        "dataannotations": {
            "type": "parameter",
            "dataType": "bool",
            "isRequired": "false",
            "defaultValue": "true",
            "description": "Adds data annotations for validation to app project"
        },
        "winauth": {
            "type": "parameter",
            "dataType": "bool",
            "isRequired": "false",
            "defaultValue": "false",
            "description": "Adds windows authentication"
        },
        "cors": {
            "type": "parameter",
            "dataType": "bool",
            "isRequired": "false",
            "defaultValue": "false",
            "description": "Adds support for CORS"
        },
        "staticfiles": {
            "type": "parameter",
            "dataType": "bool",
            "isRequired": "false",
            "defaultValue": "true",
            "description": "Adds support to serve static files"
        },
        "hateoas": {
            "type": "parameter",
            "dataType": "choice",
            "defaultValue": "none",
            "description": "Adds hateoas services",
            "choices": [{
                "choice": "none",
                "description": "Use no HATEOAS strategy"
            }, {
                "choice": "header",
                "description": "Uses weblinking as specified in RFC8288 (in header)"
            }]
        },
        "copyrightReplacer": {
            "type": "generated",
            "generator": "coalesce",
            "parameters": {
                "sourceVariableName": "copyrightName",
                "fallbackVariableName": "name"
            },
            "replaces": "$(Your Copyright Name)"
        },
        "compilerDirectives": {
            "type": "generated",
            "generator": "constant",
            "parameters": {
               "value":"#"
            },
            "replaces":"//#"
        },
        "dockerConnectionStringRename": {
            "type": "derived",
            "valueSource": "docker",
            "valueTransform": "dockerConnectionStringTransformer",
            "replaces": "Server=(localdb)\\\\MSSQLLocalDb;Integrated Security=true"
        },
        "appKebabName": {
            "type": "derived",
            "valueSource": "name",
            "valueTransform": "kebabCaseTransformer",
            "replaces": "$(kebab_appname)",
            "description": "Create a kebab case name from the app name"
        },
        "appUpperName": {
            "type": "derived",
            "valueSource": "name",
            "valueTransform": "upperCaseTransformer",
            "replaces": "$(upper_appname)",
            "description": "Create an upper case name from the app name"
        },
        "appLowerName": {
            "type": "derived",
            "valueSource": "name",
            "valueTransform": "lowerCaseTransformer",
            "replaces": "$(lower_appname)",
            "description": "Create an upper case name from the app name"
        },
        "automation": {
            "type": "parameter",
            "dataType": "bool",
            "defaultValue": "false",
            "description": "Adds the automation services"
        },
        "metadata": {
            "type": "parameter",
            "dataType": "bool",
            "defaultValue": "false",
            "description": "Add services to stream requests to a data source"
        },
        "macro": {
            "type": "parameter",
            "dataType": "bool",
            "defaultValue": "false",
            "description": "Add services to support macro requests"
        }
    },
    "sources": [
        {
            "modifiers": [
                {
                    "exclude": [
                        "**/Json/**.cs",
                        "src/**/Hateoas*.cs",
                        "src/**/Weblinking*.cs",
                        "src/.vs/**",
                        "src/BusinessApp.CompositionRoot/NullRegister.cs",
                        "src/BusinessApp.Infrastructure.WebApi/Resources/*.*"
                    ]
                },
                {
                    "condition": "(!efcore)",
                    "include": [
                        "src/BusinessApp.CompositionRoot/NullRegister.cs"
                    ],
                    "exclude": [
                        "src/.config/dotnet-tools.json",
                        "src/BusinessApp.Infrastructure.Persistence/**",
                        "src/BusinessApp.Infrastructure.Persistence*/**",
                        "src/BusinessApp.Test.Shared/BusinessAppTestDbContext.cs",
                        "src/BusinessApp.Test.Shared/DatabaseFixture.cs",
                        "src/BusinessApp.Test.Shared/migrations*.cmd",
                        "src/**/EFCore*.cs",
                        "**/Migrations/*.*"
                    ]
                },
                {
                    "condition": "(!dataannotations)",
                    "exclude": [
                        "src/**/DataAnnotations*.cs",
                        "src/**/ValidateObjectAttribute*.cs",
                        "src/**/CompositeValidationResult*.cs"
                    ]
                },
                {
                    "condition": "(!fluentvalidation)",
                    "exclude": [
                        "src/**/FluentValidation*.cs"
                    ]
                },
                {
                    "condition": "(json=='newtonsoft')",
                    "include": [
                        "**/Json/**.cs"
                    ],
                    "exclude": [
                        "src/**/SystemJson*.cs"
                    ]
                },
                {
                    "condition": "(json=='systemjson')",
                    "include": [
                        "**/Json/**.cs"
                    ],
                    "exclude": [
                        "src/**/Newtonsoft*.cs"
                    ]
                },
                {
                    "condition": "(!docker)",
                    "exclude": [
                        "src/docker-compose.*",
                        "src/Dockerfile",
                        "src/Dockerfile*",
                        "src/.env",
                        "src/.env.dev",
                        "src/.dockerignore"
                    ]
                },
                {
                    "condition": "(hateoas=='header')",
                    "include": [
                        "src/**/Hateoas*.cs",
                        "src/**/WeblinkingHeader*.cs"
                    ]
                },
                {
                    "condition": "(!automation)",
                    "exclude": [
                        "src/**/*ProcessManager*.cs",
                        "src/**/Automation*.cs"
                    ]
                },
                {
                    "condition": "(!metadata)",
                    "exclude": [
                        "src/**/RequestMetadata*.cs",
                        "src/**/*MetadataStore*.cs",
                        "src/**/IRequestMapper.cs",
                        "src/**/IRequestStore.cs"
                    ]
                },
                {
                    "condition": "(!macro)",
                    "exclude": [
                        "src/**/Macro*.cs",
                        "src/**/*Macro*.cs"
                    ]
                }
            ]
        }
    ],
    "postActions": [{
      "condition": "(vsc==\"git\")",
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "args": {
        "executable": "git",
        "args": "init"
      },
      "manualInstructions": [{
         "text": "Run 'git init'"
      }],
      "continueOnError": true,
      "description ": "sets up the project with git"
    },{
      "condition": "(vsc==\"git\")",
      "actionId": "3A7C4B45-1F5D-4A30-959A-51B88E82B5D2",
      "args": {
        "executable": "git",
        "args": "config core.hooksPath .githooks"
      },
      "manualInstructions": [{
         "text": "Run 'git config'"
      }],
      "continueOnError": true,
      "description ": "sets up git hooks"
    }],
  "forms": {
    "dockerConnectionStringTransformer": {
      "identifier": "chain",
      "steps": [ "dockerConnectionStringReplacer", "localConnectionStringReplacer" ]
    },
    "dockerConnectionStringReplacer": {
      "identifier": "replace",
      "pattern": "true",
      "replacement": "Server=db;User Id=sa;Password=foobar123@!3A"
    },
    "localConnectionStringReplacer": {
      "identifier": "replace",
      "pattern": "false",
      "replacement": "Server=(localdb)\\\\MSSQLLocalDb;Integrated Security=true"
    },
    "kebabCaseTransformer": {
      "identifier": "kebabCase"
    },
    "upperCaseTransformer": {
      "identifier": "upperCase"
    },
    "lowerCaseTransformer": {
      "identifier": "lowerCase"
    }
  }
}
